<?php

module_load_include('inc', 'tracdelight', 'includes/tracdelight_product');


define('TRACDELIGHT_MAX_ITEMS', 200);
define('TRACDELIGHT_API_URL', 'http://sapi.edelight.biz/api');

/**
 * Implements hook_entity_info().
 */
function tracdelight_entity_info() {
  $info['tracdelight_product'] = array(
    'label' => t('tracdelight product'),
    'controller class' => 'TracdelightProductController',
    'base table' => 'tracdelight_product',
    'uri callback' => 'tracdelight_product_uri',
    'label callback' => 'entity_class_label',
    'fieldable' => TRUE,
    'bundles' => array(
      'tracdelight_product' => array(
        'label' => 'tracdelight_product',
        'admin' => array(
          'path' => 'admin/structure/tracdelight_product/manage',
          'access arguments' => array('administer tracdelight_product entities'),
        ),
      )
    ),
    'entity keys' => array(
      'id' => 'ein',
    ),
    'entity class' => 'TracdelightProduct',
    'admin ui' => array(
      'path' => 'admin/content/tracdelight_product',
      'file' => 'tracdelight.admin.inc',
    ),
    'access callback' => 'tracdelight_product_access',
    'module' => 'tracdelight',
    'view modes' => array(
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  return $info;
}

function tracdelight_product_get_form($entity_type, $entity, $op = 'edit', $form_state = array()) {

  form_load_include($form_state, 'inc', 'tracdelight', 'tracdelight.admin');
  return entity_ui_get_form($entity_type, $entity, $op, $form_state);
}

/**
 * Implements hook_menu().
 */
function tracdelight_menu() {

  $items = entity_ui_controller('tracdelight_product')->hook_menu();
  foreach ($items as &$item) {
    $item['file'] = (isset($item['file'])) ? 'includes/tracdelight_product.inc' : NULL;

    if (isset($item['page callback']) && $item['page callback'] == 'entity_ui_get_form') {
      $item['page callback'] = 'tracdelight_product_get_form';
    }
  }

  $items['admin/structure/tracdelight_product/manage'] = array(
    'title' => 'Administer tracdelight_product entity type',
    'page callback' => 'tracdelight_product_admin_page',
    'access arguments' => array('administer tracdelight_product entities'),
  );

  $items['tracdelight_product/%tracdelight_product'] = array(
    'title callback' => 'postit_page_title',
    'title arguments' => array(1),
    'page callback' => 'tracdelight_product_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view tracdelight_product entities'),
    'file' => 'includes/tracdelight_product.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/tracdelight'] = array(
    'title' => 'tracdelight',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracdelight_admin'),
    'access arguments' => array('administer tracdelight_product entities'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'tracdelight.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tracdelight_permission() {
  return array(
    'create tracdelight_product entities' => array(
      'title' => t('Create products'),
      'description' => t('Allows users to create products.'),
      'restrict access' => TRUE,
    ),
    'view tracdelight_product entities' => array(
      'title' => t('View products'),
      'description' => t('Allows users to view products.'),
      'restrict access' => TRUE,
    ),
    'edit any tracdelight_product entities' => array(
      'title' => t('Edit any products'),
      'description' => t('Allows users to edit any products.'),
      'restrict access' => TRUE,
    ),
    'edit own tracdelight_product entities' => array(
      'title' => t('Edit own products'),
      'description' => t('Allows users to edit own products.'),
      'restrict access' => TRUE,
    ),
    'delete any tracdelight_product entities' => array(
      'title' => t('Delete any products'),
      'description' => t('Allows users to delete any products.'),
      'restrict access' => TRUE,
    ),
    'delete own tracdelight_product entities' => array(
      'title' => t('Delete own products'),
      'description' => t('Allows users to delete own products.'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_field_extra_fields()
 */
function tracdelight_field_extra_fields() {

  $extra_fields = array();
  $extra_fields['tracdelight_product']['tracdelight_product'] = array(
    'display' => array(
      'ein' => array(
        'label' => t('EIN'),
        'weight' => 0,
      ),
    ),
  );

  return $extra_fields;
}


function tracdelight_call_api($params, $items) {

  $access_key = variable_get('tracdelight_access_key');

  $url = TRACDELIGHT_API_URL . '?' . drupal_http_build_query(
      array(
        'AccessKey' => $access_key,
        'Extracted' => 'false',
        'Operation' => 'ItemSearch',
        'Items' => $items,
        'Output' => 'json',
        'Fields' => 'modified',
        'Sort' => '-modified',
      ) + $params
    );

  return drupal_http_request(
    url($url, array('absolute' => TRUE)),
    array(
      'Content-Type' => 'text/xml',
    ),
    'GET'
  );
}

function tracdelight_get_image($product, $image_path = 'src/normal/') {

  $tries = 0;
  do {

    $tries++;

    $image = drupal_http_request(
      url($product['imagebaseurl'] . $image_path . $product['ein'] . '.jpg', array('absolute' => TRUE)),
      array('Content-Type' => 'image/jpeg'),
      'GET'
    );
  } while ((isset($image->error) || !$image->data) && $tries < 3);

  if (!$image->data) {

    $error_msg = 'Error Message: ' . isset($image->error) ? $image->error : "Couldn't retrieve image";

    throw new TracdelightImageException($error_msg, $product['ein'], 'original');
  }

  return $image->data;
}

function tracdelight_import_products($query, $items = TRACDELIGHT_MAX_ITEMS, $last_run = 0) {

  $active_products = array();

  $response = tracdelight_call_api($query, $items);

  if ($response->code == 200) {

    $response = json_decode($response->data, 1);

    foreach ($response['itemsearchresponse']['items']['item'] as $item) {

      $active_products[] = $item['ein'];

      if ($last_run >= $item['modified']) {
        continue;
      }

      $image_data = tracdelight_get_image($item);

      $file = file_save_data($image_data, 'public://' . $item['ein'] . '.jpg', FILE_EXISTS_REPLACE);
      image_path_flush($file->uri);

      $item['shop'] = $item['shop']->name;
      $item['amount'] = $item['listprice']['amount'];
      $item['currencycode'] = $item['listprice']['currencycode'];
      $item['image'] = $file->fid;
      $item['active'] = 1;

      module_load_include('inc', 'tracdelight', 'includes/tracdelight_product');

      $product = entity_create('tracdelight_product', $item);

      $entity_exists = entity_load('tracdelight_product', array($product->ein));
      $product->is_new = empty($entity_exists);

      tracdelight_product_save($product);

    }
  }

  else {
    throw new Exception("Could not reach tracdelight API");
  }

  return $active_products;
}


/**
 * * Implementation of hook_cron_queue_info()
 */
function tracdelight_cron_queue_info() {
  $queues['tracdelight'] = array(
    'worker callback' => 'tracdelight_run', // This is the callback function for each queue item.
    'time' => 180, // This is the max run time per cron run in seconds.
  );
  return $queues;
}

/**
 * Implementation of hook_cron()
 */
function tracdelight_cron() {

  $queue = DrupalQueue::get('tracdelight');

  $page = 0;

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'tracdelight_product');

  while (TRUE) {
    $result = $query->execute();
    if (!isset($result['tracdelight_product']) || count($result['tracdelight_product']) <= 0) {
      break;
    }
    $queue->createItem($result);
    $query->range(++$page * TRACDELIGHT_MAX_ITEMS, TRACDELIGHT_MAX_ITEMS);
  }


}

/**
 * Worker Callback for the tracdelight cron queue.
 */
function tracdelight_run($item) {


  $eins = array_keys($item['tracdelight_product']);

  $active_products = tracdelight_import_products(array('EIN' => implode(',', $eins)), TRACDELIGHT_MAX_ITEMS);

  $inactive_products = array_diff($active_products, $eins);

  if ($inactive_products) {
    db_update('tracdelight_product')
      ->fields(array(
        'active' => 0,
      ))
      ->condition('ein', $inactive_products)
      ->execute();
  }
}
